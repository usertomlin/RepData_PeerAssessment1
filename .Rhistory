numeric()
x = numeric()
x
x = numeric(1)
x
x = numeric(2)
x
x[1] = 1
x
makeVector(x)
a = makeVector(x)
a
a = makeVector(x);
a$get()
a$getmean()
a$getmean()
cachemean(x)
a$getmean(1)
a$get(1)
source('~/R/DataScience.R')
makeVector(1)
a <- makeVector(c(5,1,3))
aa$get()
a$get()
b = cachemean(c(5,1,3))
mean(c(5,1,3))
cachemean(a)
b= cachemean(a)
b
matrix(3, 4)
matrix(3, 5)
matrix(3, 5, 2)
matrix(3, 3, 2)
mat = matrix(3, 3, 2)
a = runif(3)
a
mat[1] = 1
mat[2,2] = 5
mat
mat[1,3] = 6
mat[3,1] = 6
mat[3,2] = -8
matr
mat
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(invs) m <<- invs
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
mat
solve(mat)
mat = mat[1:2,]
mat
solve(mat)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(mat)
a = makeCacheMatrix(mat)
cacheSolve(a)
setwd("D:\Online Courses\Data Science\Reproducible Research\RepData_PeerAssessment1")
setwd("D:\Online Courses\Data Science\Reproducible Research\RepData_PeerAssessment1")
setwd("D:/Online Courses/Data Science/Reproducible Research/RepData_PeerAssessment1")
read.csv("activity.csv");
data = read.csv("activity.csv");
nrow(data)
ncol(data)
colnames(data)
hist(data[, 1:2])
data$steps = as.numeric(data$steps);
hist(data[, 1:2])
hist(data[, 1:2])
hist(data[, 1], data[, 2])
hist(data[, 2], data[, 1], )
data(faithful)
duration = faithful$eruptions
faithful$eruptions
hist(duration,    # apply the hist function
+   right=FALSE)
hist(duration,
+   right=FALSE)
hist(duration,
right=FALSE)
duration
nrow(data)
dateStrings = unique(data$date)
length(dateStrings)
for (){}
for (dateString in dateStrings){
}
rep(0, 3)
length(dateStrings)
source('D:/Online Courses/Data Science/Reproducible Research/peer_asssessment-1.R')
numberOfStepsPerDay
data$steps = as.numeric(data$steps);
dateStrings = unique(data$date)
numDates = length(dateStrings);
numberOfStepsPerDay = rep(0, numDates);
for (i in 1:numDates){
dateString = dateStrings[i];
correspondingRows = data[data$date == dateString, ];
numberOfSteps = sum(correspondingRows[1, "steps"]);
numberOfStepsPerDay[i] = numberOfSteps;
}
numberOfStepsPerDay
source('D:/Online Courses/Data Science/Reproducible Research/peer_asssessment-1.R')
numberOfStepsPerDay
numberOfStepsPerDay = na.omit(numberOfStepsPerDay);
length(numberOfStepsPerDay)
numberOfStepsPerDay
hist(numberOfStepsPerDay)
install.packages("knitr")
library(knitr); knit()
library(knitr);
knit()
library(markdown)
library(markdown)
library(knitr)
library(markdown)
knit('PA1_template.Rmd')
markdownToHTML("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
library(ggplot2)
install.packages("ggplot2")
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
mean(numberOfStepsPerDay)
median(numberOfStepsPerDay)
data[1:10, ]
data[1:100, ]
data[100:200, ]
data[1000:2000, ]
colnames(data)
data$date <- as.Date( data$date, '%y/%m/%d')
data[1:3, ]
data = read.csv("activity.csv");
data[1:3, ]
data$date <- as.Date( data$date, '%Y-%M-%D')
data[1:3, ]
data = read.csv("activity.csv");
data[1:3, ]
a <- as.Date( data$date, '%y-%m-%d')
a[1:3, ]
a[1:3]
a <- as.Date( data$date, '%y/%m/%d')
a[1:3]
a <- as.Date( data$date)
a[1:3]
library(ggplot2)
ggplot( data = data, aes( date, Visits )) + geom_line()
ggplot( data = data, aes( date, steps )) + geom_line()
plot(steps ~ date, data, xaxt = "n", type = "l")
plot(steps ~ interval, data, type = "l")
plot(steps ~ date, interval, data, type = "l")
data[1:3, ]
data[1:100, ]
b = as.POSIXct(paste(data$date, data$interval)
)
b
b[1]
b[2]
data[1:10, ]
data[1:30, ]
paste("00:00", 3);
paste("00:00:", 3);
paste("00:00:", 3, sep ="");
paste("00:", value, ":00",  sep ="")
paste("00:", 3, ":00",  sep ="")
data[10:40, ]
data[41:100, ]
data[100, 500, ]
data[100: 500, ]
632 %/% 100
532 $ 100
532 % 100
532 %% 100
toTimeString <- function(value){
if (value < 100){
return ( paste("00:", value, ":00",  sep =""));
} else {
h = value %/% 100;
m = value %% 100;
return ( paste( h, ":", m, ":00",  sep =""));
}
}
numRows = nrow(data);
for (i in 1:numRows){
data[i, 3] = toTimeString(data[i, 3]);
}
numRows = nrow(data);
data$interval = as.numeric(data$interval);
data$interval[1:100]
data = read.csv("activity.csv");
data$interval[1:10]
numRows = nrow(data);
a = as.numeric(data$interval);
a[1:10]
data$interval = as.numeric(data$interval);
for (i in 1:numRows){
data[i, 3] = toTimeString(data[i, 3]);
}
123 %/%100
tempTime = rep("", numRows);
for (i in 1:numRows){
tempTime[i] = toTimeString(data[i, 3]);
}
data = read.csv("activity.csv");
toTimeString <- function(value){
if (value < 100){
return ( paste("00:", value, ":00",  sep =""));
} else {
h = value %/% 100;
m = value %% 100;
return ( paste( h, ":", m, ":00",  sep =""));
}
}
numRows = nrow(data);
data$interval = as.numeric(data$interval);
tempTime = rep("", numRows);
for (i in 1:numRows){
tempTime[i] = toTimeString(data[i, 3]);
}
tempTime[1:10]
timeStrings = as.POSIXct(paste(data$date, tempTime))
timeStrings[1:10]
timeStrings[1:1000]
plot(steps ~ timeStrings, data, type = "l")
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
data[1:3, ]
oneDayData[1, ]
data[1, ]
data[289, ]
oneDayData = data[1:288, ];
for (i in 1 : 288){
intvl = data[i, 3];
theRows = data[data$interval == intvl, ];
meanOfSteps = mean(theRows[, 1]);
oneDayData[i, 1] = meanOfSteps;
}
plot(steps ~ interval, oneDayData, type = "l")
tempTime = rep("", 288);
for (i in 1 : 288){
tempTime[i] = toTimeString(oneDayData[i, 3]);
}
oneDayData[, 3] = tempTime[i];
plot(steps ~ interval, oneDayData, type = "l")
oneDayData[, 3] = as.POSIXct(tempTime[i]);
tempTime
oneDayData[, 3] = as.POSIXct(tempTime[i]);
oneDayData[, 3] = tempTime[i];
plot(steps ~ interval, oneDayData, type = "l")
oneDayData = data[1:288, ];
for (i in 1 : 288){
intvl = data[i, 3];
theRows = data[data$interval == intvl & data$steps != NA, ];
meanOfSteps = mean(theRows[, 1]);
oneDayData[i, 1] = meanOfSteps;
}
plot(steps ~ interval, oneDayData, type = "l")
oneDayData = data[1:288, ];
for (i in 1 : 288){
intvl = data[i, 3];
theRows = data[data$interval == intvl & data$steps != "NA", ];
meanOfSteps = mean(theRows[, 1]);
oneDayData[i, 1] = meanOfSteps;
}
plot(steps ~ interval, oneDayData, type = "l")
data$steps[1:10]
nrow(data)
nrow(data[data$steps != "NA", ])
nrow(data[data$steps != NA, ])
nrow(data[ is.na(data$steps) == FALSE , ])
for (i in 1 : 288){
intvl = data[i, 3];
theRows = data[data$interval == intvl & is.na(data$steps) == FALSE, ];
meanOfSteps = mean(theRows[, 1]);
oneDayData[i, 1] = meanOfSteps;
}
plot(steps ~ interval, oneDayData, type = "l")
tempTime = rep("", 288);
for (i in 1 : 288){
tempTime[i] = toTimeString(oneDayData[i, 3]);
}
oneDayData[, 3] = tempTime[i];
plot(steps ~ interval, oneDayData, type = "l")
oneDayData[, 3] = as.POSIXct(tempTime[i]);
data[1:3, ]
tempTime = rep("", 288);
for (i in 1 : 288){
#tempTime[i] = toTimeString(oneDayData[i, 3]);
tempTime[i] = paste( "2000-10-01", toTimeString(oneDayData[i, 3]) );
}
tempTime = rep("", 288);
for (i in 1 : 288){
tempTime[i] = toTimeString(oneDayData[i, 3]);
#tempTime[i] = paste( "2000-10-01", toTimeString(oneDayData[i, 3]) );
}
for (i in 1 : 288){
intvl = data[i, 3];
theRows = data[data$interval == intvl & is.na(data$steps) == FALSE, ];
meanOfSteps = mean(theRows[, 1]);
oneDayData[i, 1] = meanOfSteps;
}
tempTime = rep("", 288);
for (i in 1 : 288){
tempTime[i] = toTimeString(oneDayData[i, 3]);
#tempTime[i] = paste( "2000-10-01", toTimeString(oneDayData[i, 3]) );
}
oneDayData
tempTime = rep("", 288);
for (i in 1 : 288){
tempTime[i] = toTimeString(oneDayData[i, 3]);
#tempTime[i] = paste( "2000-10-01", toTimeString(oneDayData[i, 3]) );
}
for (i in 1 : 288){
tempTime[i] = toTimeString(data[i, 3]);
#tempTime[i] = paste( "2000-10-01", toTimeString(oneDayData[i, 3]) );
}
tempTime = rep("", 288);
for (i in 1 : 288){
#tempTime[i] = toTimeString(data[i, 3]);
tempTime[i] = paste( "2000-10-01", toTimeString(data[i, 3]) );
}
tempTime
oneDayData[, 3] = as.POSIXct(tempTime);
oneDayData[, 3]
plot(steps ~ interval, oneDayData, type = "l")
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
which.max(oneDayData[, "steps"])
oneDayData[104, "interval"]
a = data[is.na(data$steps) == T, ]
nrow(a)
data[is.na(data$steps) == T, ]
nrow (data[is.na(data$steps) == T, ])
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
numRows
data2 = data;
oneDayData[, 4] = as.POSIXct(tempTime);
oneDayData = data[1:288, ];
for (i in 1 : 288){
intvl = data[i, 3];
theRows = data[data$interval == intvl & is.na(data$steps) == FALSE, ];
meanOfSteps = mean(theRows[, 1]);
oneDayData[i, 1] = meanOfSteps;
}
tempTime = rep("", 288);
for (i in 1 : 288){
#tempTime[i] = toTimeString(data[i, 3]);
tempTime[i] = paste( "2000-10-01", toTimeString(data[i, 3]) );
}
oneDayData[, "time"] = as.POSIXct(tempTime);
plot(steps ~ time, oneDayData, type = "l")
ncol(oneDayData)
oneDayData[, 3]
which(oneDayData[, 3] == 1750)
data2 = data;
for (i in 1 : numRows){
if (is.na(data[i, 1])){
interval = data[i, 3];
index = which(oneDayData[, 3] == interval)
data2[i, 1] = oneDayData[i, 1];
}
}
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
data2$steps = as.numeric(data2$steps);
data2$steps = as.numeric(data2$steps);
dateStrings = unique(data$date)
numDates = length(dateStrings);
numberOfStepsPerDay = rep(0, numDates);
for (i in 1:numDates){
dateString = dateStrings[i];
correspondingRows = data[data$date == dateString, ];
numberOfSteps = sum(correspondingRows[, 1]);
numberOfStepsPerDay[i] = numberOfSteps;
}
mean(numberOfStepsPerDay)
data2$steps = as.numeric(data2$steps);
dateStrings = unique(data2$date)
numDates = length(dateStrings);
numberOfStepsPerDay = rep(0, numDates);
for (i in 1:numDates){
dateString = dateStrings[i];
correspondingRows = data[data2$date == dateString, ];
numberOfSteps = sum(correspondingRows[, 1]);
numberOfStepsPerDay[i] = numberOfSteps;
}
mean(numberOfStepsPerDay)
data2$steps = as.numeric(data2$steps);
dateStrings = unique(data2$date)
numDates = length(dateStrings);
numberOfStepsPerDay = rep(0, numDates);
for (i in 1:numDates){
dateString = dateStrings[i];
correspondingRows = data2[data2$date == dateString, ];
numberOfSteps = sum(correspondingRows[, 1]);
numberOfStepsPerDay[i] = numberOfSteps;
}
mean(numberOfStepsPerDay)
data2$steps = as.numeric(data2$steps);
dateStrings = unique(data2$date)
numDates = length(dateStrings);
numDates
length(numberOfStepsPerDay)
dateStrings
correspondingRows = data2[data2$date == "2012-10-04", ];
nrow(correspondingRows)
numberOfSteps = sum(correspondingRows[, 1]);
numberOfSteps
numberOfStepsPerDay
data2 = data;
for (i in 1 : numRows){
if (is.na(data[i, 1])){
interval = data[i, 3];
index = which(oneDayData[, 3] == interval)
data2[i, 1] = oneDayData[i, 1];
}
}
data2[1:100, 1]
data2$steps = as.numeric(data2$steps);
dateStrings = unique(data2$date)
numDates = length(dateStrings);
numberOfStepsPerDay = rep(0, numDates);
for (i in 1:numDates){
dateString = dateStrings[i];
correspondingRows = data2[data2$date == dateString, ];
numberOfSteps = sum(correspondingRows[, 1]);
numberOfStepsPerDay[i] = numberOfSteps;
}
mean(numberOfStepsPerDay)
data2$steps[1,1000]
data2$steps[1:1000]
numberOfStepsPerDay
data2 = data;
for (i in 1 : numRows){
if (is.na(data2[i, 1])){
interval = data[i, 3];
index = which(oneDayData[, 3] == interval)
data2[i, 1] = oneDayData[i, 1];
}
}
data2$steps = as.numeric(data2$steps);
dateStrings = unique(data2$date)
numDates = length(dateStrings);
numberOfStepsPerDay = rep(0, numDates);
for (i in 1:numDates){
dateString = dateStrings[i];
correspondingRows = data2[data2$date == dateString, ];
numberOfSteps = sum(correspondingRows[, 1]);
numberOfStepsPerDay[i] = numberOfSteps;
}
mean(numberOfStepsPerDay)
numberOfStepsPerDay
data2 = data;
for (i in 1 : numRows){
if (is.na(data2[i, 1])){
interval = data[i, 3];
index = which(oneDayData[, 3] == interval)
data2[i, 1] = oneDayData[i, 1];
}
}
nrow (data2[is.na(data2$steps), ])
data2 = data;
for (i in 1 : numRows){
if (is.na(data2[i, 1])){
interval = data[i, 3];
index = which(oneDayData[, 3] == interval)
data2[i, 1] = oneDayData[index, 1];
}
}
nrow (data2[is.na(data2$steps), ])
data2$steps = as.numeric(data2$steps);
dateStrings = unique(data2$date)
numDates = length(dateStrings);
numberOfStepsPerDay = rep(0, numDates);
for (i in 1:numDates){
dateString = dateStrings[i];
correspondingRows = data2[data2$date == dateString, ];
numberOfSteps = sum(correspondingRows[, 1]);
numberOfStepsPerDay[i] = numberOfSteps;
}
mean(numberOfStepsPerDay)
median(numberOfStepsPerDay)
median(numberOfStepsPerDay)
numberOfStepsPerDay
knit2html("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
knit2html("PA1_template.Rmd", "PA1_template.html",fragment.only = TRUE)
